t1
myfiles[13]
head(t1)
as.numeric(t1$extensions)
head(as.numeric(t1$extensions))
head(t1)
t1$speed <- gsub(".*", "", t1$extensions)
head(t1)
t1$speed <- gsub("(*.*)(.*)", "\\1", t1$extensions)
head(t1)
t1$speed <- gsub(".([^.]*)$", "", t1$extensions)
head(t1)
t1$speed <- gsub(".([^.]*)$", "", t1$extensions)
head(t1)
plot(t1$speed)
t1$speed <- as.numeric(gsub(".([^.]*)$", "", t1$extensions))
head(t1)
plot(t1$speed)
for (i in 1:length(myfiles)){
print(i)
tryCatch({
p1 <- readGPX(myfiles[i])
#head(p1$tracks[[1]][[1]])
t1 <- do.call("rbind", unlist(p1$tracks, recursive=F))
t1$speed <- as.numeric(gsub(".([^.]*)$", "", t1$extensions))
if (i == 1){
gpx_data <- t1
} else {
gpx_data <- rbind(gpx_data, t1)
}
rm(p1, t1)
}, error=function(e){cat("ERROR\n")})
}
head(gpx_data)
tail(gpx_data)
gpx_data$time <- strptime(gpx_data$time, format = "%Y-%m-%dT%H:%M:%SZ")
gpx_data <- arrange(gpx_data, time)
gpx_data_trip <- gpx_data[which(as.numeric(gpx_data$lon) < 0),]
gpx_data_trip$day <- as.factor(format(as.Date(gpx_data_trip$time,format="%Y-%m-%d"), "%d"))
head(gpx_data_trip)
tail(gpx_data_trip)
summary(gpx_data_trip)
nrow(gpx_data_trip)
range(as.character(gpx_data_trip$time))
library(chron)
gpx_data_trip$ctime <- as.chron(as.character(gpx_data_trip$time))
plot(gpx_data_trip$ctime)
pirateplot(formula = as.numeric(speed) ~ as.factor(day),
point.o = .1,
data = gpx_data_trip)
library(spatstat)
library(maptools)
gp1.ppp <- as(SpatialPoints(gpx_data_trip), "ppp")
We have `r nrow(geodata)` data points with a range of: `r range(as.character(geodata$time))`.
library(XML)
doc <- xmlTreeParse(myfiles[17])
xmlAttrs(xmlRoot(doc))
xmlAttrs(xmlRoot(doc)[["variables"]])
?pirateplot
xmlAttrs(xmlRoot(doc)[["variables"]])
xmlAttrs(xmlRoot(doc)[[1]])
xmlAttrs(xmlRoot(doc)[[2]])
doc <- xmlTreeParse(fileName, useInternalNodes = TRUE)
doc <- xmlTreeParse(myfiles[1], useInternalNodes = TRUE)
d = xmlRoot(doc)
xmlAttrs(d)
doc2=xmlParse(myfiles[1])
doc2
?xpathSApply
timeStamps = xpathSApply(doc2, path = "//trkpt/time", function(x) c(name=xmlName(x), xmlAttrs(x))))
timeStamps = xpathSApply(doc2, path = "//trkpt/time", function(x) c(name=xmlName(x), xmlAttrs(x)))
timeStamps
dd2 = xmlToDataFrame(getNodeSet(doc2, "//trkpt"), xmlAttrs)
dd2
dd2 = xmlToDataFrame(getNodeSet(doc2, "//trkpt"), xmlAttrs)
dd2
dd2 = xmlToDataFrame(getNodeSet(doc2, "//trkpt/time", xmlValue)
)
getNodeSet(doc2, "//trkpt/time", xmlValue)
dd2 = xmlToDataFrame(getNodeSet(myfiles[1], "//trkpt/time", xmlValue))
dum <- xmlParse(myfile[1])
dum <- xmlParse(myfiles[17])
dum
xDf <- xmlToDataFrame(nodes = getNodeSet(dum, "//*/extensions"), stringsAsFactors = FALSE)
xDf
xDf <- xmlToDataFrame(nodes = getNodeSet(dum, "//*/trkpt"), stringsAsFactors = FALSE)
xDf
pfile <- xmlParse(myfiles[17])
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
elevations
pfile <- htmlTreeParse(myfiles[17])
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
pfile
pfile <- htmlTreeParse(myfiles[17], useInternalNodes = T)
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
elevations
pfile
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
times
coords
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
head(geodf)
tail(geodf)
times <- xpathSApply(pfile, path = "//trkpt/extensions", xmlValue)
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
extensions <- xpathSApply(pfile, path = "//trkpt/extensions", xmlValue)
extensions
xmlParse(myfiles[17])
extensions <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
extensions
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
geodf <- data.frame(lat = lats, lon = lons, ele = elevations, time = times, speed = speed)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
course
lons
lats
length(lats)
length(times)
length(speed)
length(course)
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue, NA)
length(speed)
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
speed <- xmlGetNodeAttr(pfile, "/trkpt/extensions/*/speed",NA)
??xmlGetNodeAttr
xp <- "./extensions/*/speed/course"
xp
speed <- xpathSApply(node, "./extensions/*/speed", xmlValue)
do.call(rbind, xpathApply(pfile, path = "//trkpt", function(node) {
times <- xmlValue(node[["time"]])
speed <- xpathSApply(node, "./extensions/*/speed", xmlValue)
if (is.null(speed)) landmark <- NA
data.frame(times, speed, stringsAsFactors = FALSE)
}))
xD <- xmlParse(pfile)
xD <- xmlParse(myfiles[17])
xL <- xmlToList(xD)
ldply(xL, data.frame)
length(speed)
pfile <- htmlTreeParse("test.gpx", useInternalNodes = T)
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
length(times)
length(coords)
length(speed)
length(course)
pfile
pfile2 <- gsub("</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:course>",
"</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:speed>0.00</gpxtpx:speed><gpxtpx:course>", pfile)
singleString <- paste(readLines("test.gpx"), collapse=" ")
singleString
pfile2 <- gsub("</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:course>",
"</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:speed>0.00</gpxtpx:speed><gpxtpx:course>", singleString)
pfile <- htmlTreeParse(pfile2, useInternalNodes = T)
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
length(times)
length(coords)
length(speed)
length(course)
pfile <- htmlTreeParse(myfiles[1], useInternalNodes = T)
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
length(times)
length(coords)
length(speed)
length(course)
singleString <- paste(readLines(myfiles[1]), collapse=" ")
pfile2 <- gsub("</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:course>",
"</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:speed>0.00</gpxtpx:speed><gpxtpx:course>", singleString)
pfile <- htmlTreeParse(pfile2, useInternalNodes = T)
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
length(times)
length(lats)
length(speed)
length(course)
for (i in 1:length(myfiles)){
# One of the files seems to be broken, but since the file is one with earlier data
# not from the trip, I will simply skip it
tryCatch({
singleString <- paste(readLines(myfiles[i]), collapse=" ")
pfile2 <- gsub("</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:course>",
"</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:speed>0.00</gpxtpx:speed><gpxtpx:course>", singleString)
pfile <- htmlTreeParse(pfile2, useInternalNodes = T)
}, error=function(e){cat("ERROR\n")})
if (exists("pfile")){
# Get all elevations, times and coordinates via the respective xpath
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, time = times, speed = speed, course = course)
if (i == 1){
geodata_new <- geodf
} else {
geodata_new <- rbind(geodata_new, geodf)
}
rm(pfile, pfile2, singleString)
}
head(geodata_new)
tail(geodata_new)
for (i in 1:length(myfiles)){
print(i)
# One of the files seems to be broken, but since the file is one with earlier data
# not from the trip, I will simply skip it
tryCatch({
singleString <- paste(readLines(myfiles[i]), collapse=" ")
pfile2 <- gsub("</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:course>",
"</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:speed>0.00</gpxtpx:speed><gpxtpx:course>", singleString)
pfile <- htmlTreeParse(pfile2, useInternalNodes = T)
}, error=function(e){cat("ERROR\n")})
if (exists("pfile")){
# Get all elevations, times and coordinates via the respective xpath
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, time = times, speed = speed, course = course)
if (i == 1){
geodata_new <- geodf
} else {
geodata_new <- rbind(geodata_new, geodf)
}
rm(pfile, pfile2, singleString)
}
i=3
singleString <- paste(readLines(myfiles[i]), collapse=" ")
pfile2 <- gsub("</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:course>",
"</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:speed>0.00</gpxtpx:speed><gpxtpx:course>", singleString)
pfile <- htmlTreeParse(pfile2, useInternalNodes = T)
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, time = times, speed = speed, course = course)
length(times)
length(lats)
length(speed)
length(course)
singleString
myfiles[i]
for (i in 1:length(myfiles)){
print(i)
# One of the files seems to be broken, but since the file is one with earlier data
# not from the trip, I will simply skip it
tryCatch({
singleString <- paste(readLines(myfiles[i]), collapse=" ")
pfile2 <- gsub("</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:course>",
"</time><extensions><gpxtpx:TrackPointExtension><gpxtpx:speed>0.00</gpxtpx:speed><gpxtpx:course>", singleString)
pfile <- htmlTreeParse(pfile2, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
speed <- xpathSApply(pfile, path = "//trkpt/extensions/*/speed", xmlValue)
course <- xpathSApply(pfile, path = "//trkpt/extensions/*/course", xmlValue)
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, time = times, speed = speed, course = course)
if (i == 1){
geodata_new <- geodf
} else {
geodata_new <- rbind(geodata_new, geodf)
}
rm(pfile, pfile2, singleString)
}, error=function(e){cat("ERROR\n")})
}
head(geodata_new)
tail(geodata_new)
# Transforming the time column
geodata_new$time <- strptime(geodata_new$time, format = "%Y-%m-%dT%H:%M:%SZ")
# ordering by date
geodata_new <- arrange(geodata_new, time)
# removing all tracks from Germany
geodata_new_trip <- geodata_new[which(as.numeric(geodata_new$lon) < 0),]
geodata_new_trip$day <- as.factor(format(as.Date(geodata_new_trip$time,format="%Y-%m-%d"), "%d"))
head(gpx_data_trip)
head(geodata_new_trip)
pirateplot(formula = as.numeric(speed) ~ as.factor(day),
point.o = .1,
data = gpx_data_trip,
ylab = "Speed",
xlab = "Day",
main = "Speed per day")
summary(as.numeric(speed))
pirateplot(formula = as.numeric(speed) ~ as.factor(day),
point.o = .1,
data = geodata_new_trip,
ylab = "Speed",
xlab = "Day",
main = "Speed per day")
pirateplot(formula = as.numeric(speed) ~ as.factor(day),
point.o = .1,
data = geodata_new_trip[which(geodata_new_trip$speed > 0),],
ylab = "Speed",
xlab = "Day",
main = "Speed per day")
speed_data <- geodata_new_trip[which(geodata_new_trip$speed > 0),]
head(speed_data)
head(geodata_new_trip)
speed_data <- geodata_new_trip[which(as.numeric(geodata_new_trip$speed) > 0),]
head(speed_data)
pirateplot(formula = as.numeric(speed) ~ as.factor(day),
point.o = .1,
data = geodata_new_trip[which(as.numeric(geodata_new_trip$speed) > 0),],
ylab = "Speed",
xlab = "Day",
main = "Speed per day")
as.numeric(speed)
speed_data <- geodata_new_trip[which(as.numeric(geodata_new_trip$speed) > 0),]
nrow(speed_data)
speed_data <- speed_data[!duplicated(speed_data), ]
nrow(speed_data)
pirateplot(formula = as.numeric(speed) ~ as.factor(day),
point.o = .1,
data = speed_data,
ylab = "Speed",
xlab = "Day",
main = "Speed per day")
speed_data
range(speed_data$speed)
range(as.numeric(speed_data$speed))
summary(as.numeric(speed_data$speed))
geodata_new_trip$speed_kmh <- geodata_new_trip$speed *3.6
speed_data <- geodata_new_trip[which(as.numeric(geodata_new_trip$speed_kmh) > 0),]
speed_data <- speed_data[!duplicated(speed_data), ]
summary(as.numeric(speed_data$speed_kmh))
pirateplot(formula = as.numeric(speed_kmh) ~ as.factor(day),
point.o = .1,
data = speed_data,
ylab = "Speed",
xlab = "Day",
main = "Speed per day")
geodata_new_trip$speed_kmh
geodata_new_trip$speed_kmh <- as.numeric(geodata_new_trip$speed) *3.6
speed_data <- geodata_new_trip[which(as.numeric(geodata_new_trip$speed_kmh) > 0),]
speed_data <- speed_data[!duplicated(speed_data), ]
summary(as.numeric(speed_data$speed_kmh))
pirateplot(formula = as.numeric(speed_kmh) ~ as.factor(day),
point.o = .1,
data = speed_data,
ylab = "Speed",
xlab = "Day",
main = "Speed per day")
30 *3.6
head(geodata_new_trip)
as.numeric(0)
as.numeric(0) + 3.6
as.numeric(0) * 3.6
geodata_new_trip$speed_kmh <- as.numeric(geodata_new_trip$speed) *3.6
head(geodata_new_trip)
summary(as.numeric(speed_data$speed_kmh))
summary(as.numeric(speed_data$speed))
summary(as.numeric(geodata_new_trip$speed))
summary(as.numeric(geodata_new_trip$speed_kmh))
head(as.numeric(geodata_new_trip$speed)
)
head(geodata_new_trip$speed)
geodata_new_trip$speed_kmh <- as.numeric(as.character(geodata_new_trip$speed)) *3.6
summary(geodata_new_trip$speed_kmh)
speed_data <- geodata_new_trip[which(as.numeric(as.character(geodata_new_trip$speed_kmh)) > 0),]
speed_data <- speed_data[!duplicated(speed_data), ]
summary(as.numeric(as.character(speed_data$speed_kmh)))
pirateplot(formula = as.numeric(as.character(speed_kmh)) ~ as.factor(day),
point.o = .1,
data = speed_data,
ylab = "Speed",
xlab = "Day",
main = "Speed per day")
head(geodata_new_trip)
shift.vec <- function (vec, shift){
if(length(vec) <= abs(shift)){
rep(NA ,length(vec))
} else {
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec)-shift)]) }
else {
c(vec[(abs(shift)+1):length(vec)], rep(NA, abs(shift)))
}
geodata_new_trip$lat.p1 <- shift.vec(geodata_new_trip$lat, -1)
geodata_new_trip$lon.p1 <- shift.vec(geodata_new_trip$lon, -1)
head(geodata_new_trip)
geodata_new_trip <- geodata_new_trip[!duplicated(geodata_new_trip), ]
shift.vec <- function (vec, shift){
if(length(vec) <= abs(shift)){
rep(NA ,length(vec))
} else {
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec)-shift)]) }
else {
c(vec[(abs(shift)+1):length(vec)], rep(NA, abs(shift)))
}
geodata_new_trip$lat.p1 <- shift.vec(geodata_new_trip$lat, -1)
geodata_new_trip$lon.p1 <- shift.vec(geodata_new_trip$lon, -1)
head(geodata_new_trip)
library(raster)
geodata_new_trip$dist.to.prev <- apply(geodata_new_trip, 1, FUN = function (row) {
pointDistance(c(as.numeric(row["lat.p1"]),
as.numeric(row["lon.p1"])),
c(as.numeric(row["lat"]), as.numeric(row["lon"])),
lonlat = T) # Parameter 'lonlat' has to be TRUE!
})
summary(geodata_new_trip$dist.to.prev)
geodata_per_day <- split(geodata_new_trip, as.Date(geodata_new_trip$time))
str(geodata_per_day)
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, time.p1= shift.vec(x$time, -1)))
head(geodata_per_day)
head(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, time.diff.to.prev = as.numeric(difftime(x$time.p1, x$time))))
head(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.m.per.sec = x$dist.to.prev / x$time.diff.to.prev))
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.km.per.h = x$speed.m.per.sec * 3.6))
head(geodata_per_day[[1]])
geodata_per_day_combined <- do.call("rbind", geodata_per_day)
head(geodata_per_day_combined)
pirateplot(formula = speed.km.per.h ~ day,
point.o = .1,
data = geodata_per_day_combined)
setwd("U:/Github_blog/posts_Rmd")
geodata_2 <- read.table("../gpx/geodata_plus_maps.txt", header = T, sep = "\t")
head(geodata_2)
geodata_2$dist.to.prev <- apply(geodata_2, 1, FUN = function (row) {
pointDistance(c(as.numeric(row["lat.p1"]),
as.numeric(row["lon.p1"])),
c(as.numeric(row["lat"]), as.numeric(row["lon"])),
lonlat = T) # Parameter 'lonlat' has to be TRUE!
})
head(geodata_2)
geodata_2 <- geodata_2[!duplicated(geodata_2), ]
shift.vec <- function (vec, shift){
if(length(vec) <= abs(shift)){
rep(NA ,length(vec))
} else {
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec)-shift)]) }
else {
c(vec[(abs(shift)+1):length(vec)], rep(NA, abs(shift)))
}
geodata_2$lat.p1 <- shift.vec(geodata_2$lat, -1)
geodata_2$lon.p1 <- shift.vec(geodata_2$lon, -1)
# Calculating distances between points (in metres) with the function pointDistance from the 'raster' package.
library(raster)
geodata_2$dist.to.prev <- apply(geodata_2, 1, FUN = function (row) {
pointDistance(c(as.numeric(row["lat.p1"]),
as.numeric(row["lon.p1"])),
c(as.numeric(row["lat"]), as.numeric(row["lon"])),
lonlat = T) # Parameter 'lonlat' has to be TRUE!
})
head(geodata_2)
sum(geodata_2$dist.to.prev)
library(raster)
geodata_2$dist.to.prev <- apply(geodata_2, 1, FUN = function (row) {
pointDistance(c(as.numeric(as.character(row["lat.p1"])),
as.numeric(as.character(row["lon.p1"]))),
c(as.numeric(as.character(row["lat"])), as.numeric(as.character(row["lon"]))),
lonlat = T) # Parameter 'lonlat' has to be TRUE!
})
sum(as.numeric(as.character(geodata_2$dist.to.prev))
)
geodata_2$dist.to.prev
as.numeric(as.character(geodata_2$dist.to.prev))
sum(as.numeric(as.character(geodata_2$dist.to.prev)))
?sum
str(as.numeric(as.character(geodata_2$dist.to.prev)))
sum(as.numeric(as.character(geodata_2$dist.to.prev)), na.rm = TRUE)
sum(as.numeric(as.character(geodata_2$dist.to.prev)), na.rm = TRUE)*0.001
r sum(as.numeric(as.character(geodata_2$dist.to.prev)), na.rm = TRUE)*0.001/12
sum(as.numeric(as.character(geodata_2$dist.to.prev)), na.rm = TRUE)*0.001/12
round(sum(as.numeric(as.character(geodata_2$dist.to.prev)), na.rm = TRUE)*0.001, digits = 2)
39050+750+2500
