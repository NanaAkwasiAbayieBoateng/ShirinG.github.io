head(geodata[[i]])
head(geodata_per_day[[i]])
tail(geodata_per_day[[i]])
data <- geodata_per_day[[i]]
plot(rev(data$lon), rev(data$lat), type = "l", col = "red", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
plot(rev(geodata$lon), rev(geodata$lat), type = "l", col = "white", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
lines(rev(data$lon), rev(data$lat), type = "l", col = "red", lwd = 3)
library(RColorBrewer)
?brewer.pal
display.brewer.all()
display.brewer.all(n=15, type="all", select=NULL, exact.n=TRUE, colorblindFriendly=TRUE)
col=rainbow(15)
col
plot(rev(geodata$lon), rev(geodata$lat), type = "l", col = "white", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
plot(rev(geodata$lon), rev(geodata$lat), type = "l", col = "white", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
for (i in length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
}
plot(rev(geodata$lon), rev(geodata$lat), type = "l", col = "white", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
i=1
data <- geodata_per_day[[i]]
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
i02
i=2
data <- geodata_per_day[[i]]
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
for (i in length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
}
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
}
plot(rev(geodata$lon), rev(geodata$lat), type = "l", col = "white", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
str(geodata_per_day)
i=15
data <- geodata_per_day[[i]]
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "osm")
transmap <- openproj(map, projection = "+proj=longlat")
plot(transmap, raster=T)
lines(data$lon, data$lat, type = "l", col = scales::alpha("red", .5), lwd = 4)
map <- openmap(as.numeric(c(max(geodata$lat), min(geodata$lon))),
as.numeric(c(min(geodata$lat), max(geodata$lon))), type = "osm")
transmap <- openproj(map, projection = "+proj=longlat")
plot(transmap, raster=T)
lines(data$lon, data$lat, type = "l", col = scales::alpha("red", .5), lwd = 4)
data
i=1
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
}
max(geodata$lat)
map <- openmap(as.numeric(c(max(geodata$lat)+0.1, min(geodata$lon)-0.1)),
as.numeric(c(min(geodata$lat)+0.1, max(geodata$lon)-0.1)), type = "osm")
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
#png("map1.png", width = 1000, height = 800, res = 100)
#par(mar = rep(0,4))
plot(transmap, raster=T)
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
}
map <- openmap(as.numeric(c(max(geodata$lat)+1, min(geodata$lon)-1)),
as.numeric(c(min(geodata$lat)-1, max(geodata$lon)+1)), type = "osm")
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
#png("map1.png", width = 1000, height = 800, res = 100)
#par(mar = rep(0,4))
plot(transmap, raster=T)
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
}
summary(geodata_all)
map <- openmap(as.numeric(c(max(geodata$lat)+1, min(geodata$lon)-1)),
as.numeric(c(min(geodata$lat)-1, max(geodata$lon)+1)), type = "bing") # type = osm, bing, mapquest, skobbler, esri-topo
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
#png("map1.png", width = 1000, height = 800, res = 100)
#par(mar = rep(0,4))
plot(transmap, raster=T)
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
}
map <- openmap(as.numeric(c(max(geodata$lat)+1, min(geodata$lon)-1)),
as.numeric(c(min(geodata$lat)-1, max(geodata$lon)+1)), type = "mapquest") # type = osm, bing, mapquest, skobbler, esri-topo
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
#png("map1.png", width = 1000, height = 800, res = 100)
#par(mar = rep(0,4))
plot(transmap, raster=T)
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
}
?openmap
map <- openmap(as.numeric(c(max(geodata$lat)+1, min(geodata$lon)-1)),
as.numeric(c(min(geodata$lat)-1, max(geodata$lon)+1)), type = "maptoolkit-topo")
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
#png("map1.png", width = 1000, height = 800, res = 100)
#par(mar = rep(0,4))
plot(transmap, raster=T)
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
}
map <- openmap(as.numeric(c(max(geodata$lat)+1, min(geodata$lon)-1)),
as.numeric(c(min(geodata$lat)-1, max(geodata$lon)+1)), type = "waze")
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
#png("map1.png", width = 1000, height = 800, res = 100)
#par(mar = rep(0,4))
plot(transmap, raster=T)
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
}
map <- openmap(as.numeric(c(max(geodata$lat)+1, min(geodata$lon)-1)),
as.numeric(c(min(geodata$lat)-1, max(geodata$lon)+1)), type = "esri")
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
#png("map1.png", width = 1000, height = 800, res = 100)
#par(mar = rep(0,4))
plot(transmap, raster=T)
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(data$lon, data$lat, type = "l", col = col[i], lwd = 4)
}
plot(geodata$ele, type = "l", bty = "n", xaxt = "n", ylab = "Elevation", xlab = "", col = "grey40")
lines(geodata$lowess.ele, col = "red", lwd = 3)
legend(x="bottomright", legend = c("GPS elevation", "LOWESS elevation"),
col = c("grey40", "red"), lwd = c(1,3), bty = "n")
plot(geodata$speed.km.per.h, type = "l", bty = "n", xaxt = "n", ylab = "Speed (km/h)", xlab = "",
col = "grey40")
lines(geodata$lowess.speed, col = "blue", lwd = 3)
legend(x="bottom", legend = c("GPS speed", "LOWESS speed"),
col = c("grey40", "blue"), lwd = c(1,3), bty = "n")
abline(h = mean(geodata$speed.km.per.h), lty = 2, col = "blue")
summary(geodata$speed.km.per.h)
ggplot(data = geodata, aes(x = speed.km.per.h)) + geom_density()
install.packages("yarrr")  # Install package from CRAN
library(yarrr)
pirateplot(formula = ele ~ speed.km.per.h,
point.o = .1,
data = geodata)
?pirateplot
pirateplot(formula = speed.km.per.h,
point.o = .1,
data = geodata)
pirateplot(formula = geodata$speed.km.per.h,
point.o = .1,
data = geodata)
head(geodata)
geodata$day <- days(geodata$time)
head(geodata)
?days
pirateplot(formula = speed.km.per.h ~ day,
point.o = .1,
data = geodata)
summary(dist.to.prev)
summary(geodata$dist.to.prev)
geodata <- geodata[-which(geodata$dist.to.prev == 0), ]
head(geodata)
tail(geodata)
pirateplot(formula = speed.km.per.h ~ day,
point.o = .1,
data = geodata)
pirateplot(formula = dist.to.prev ~ day,
point.o = .1,
data = geodata)
pirateplot(formula = time.diff.to.prev ~ day,
point.o = .1,
data = geodata)
summary(geodata$time.diff.to.prev)
pirateplot(formula = speed.m.per.sec ~ day,
point.o = .1,
data = geodata)
geodata_per_day <- split(geodata, as.Date(geodata$time))
str(geodata_per_day)
# Plotting each day separately in a different color
col=rainbow(15)
plot(rev(geodata$lon), rev(geodata$lat), type = "l", col = "white", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
}
head(geodata)
pirateplot(formula = speed.km.per.h ~ day,
point.o = .1,
data = geodata)
geodata[which(geodata$speed.km.per.h > 150),]
head(geodata[which(geodata$speed.km.per.h > 150),])
geodata_per_day <- split(geodata, as.Date(geodata$time))
str(geodata_per_day)
head(str(geodata_per_day))
head(geodata_all)
# removing all tracks from Germany
geodata <- geodata_all[which(as.numeric(geodata_all$lon) < 0),]
# extracting day
geodata$day <- days(geodata$time)
# removing points with no distance betwee them
geodata <- geodata[-which(geodata$dist.to.prev == 0), ]
head(geodata)
tail(geodata)
summary(geodata)
head(geodata_all)
geodata <- geodata_all[which(as.numeric(geodata_all$lon) < 0),]
head(geodata)
geodata$day <- days(geodata$time)
head(geodata)
geodata$lat.p1 <- shift.vec(geodata$lat, -1)
geodata$lon.p1 <- shift.vec(geodata$lon, -1)
head(geodata)
tail(geodata)
library(raster)
geodata$dist.to.prev <- apply(geodata, 1, FUN = function (row) {
pointDistance(c(as.numeric(row["lat.p1"]),
as.numeric(row["lon.p1"])),
c(as.numeric(row["lat"]), as.numeric(row["lon"])),
lonlat = T) # Parameter ‘lonlat’ has to be TRUE!
})
head(geodata)
tail(geodata)
geodata <- geodata[-which(geodata$dist.to.prev == 0), ]
geodata <- geodata[!duplicated(geodata),]
head(geodata)
tail(geodata)
geodata_per_day <- split(geodata, as.Date(geodata$time))
str(geodata_per_day)
test <- geodata[[1:3]]
test <- geodata_per_day[1:3]
test
str(test)
test2 <- lapply(test, function(x) {
shift.vec(x$time, -1)
x} )
str(test2)
head(test2[1])
head(test2[[1]])
tail(test2[[1]])
data <- test[[1]]
head(data)
nrow(data)
abs(-1)
-1 >= 0
str(test)
a <- data.frame(c(1,2,3), c(2,3,4))
b <- data.frame(c(7,8,9), c(5,6,2))
l <- list(a, b)
l
lapply(l, function(x) cbind(x, x[,2]*2))
lapply(test, function(x) cbind(x, shift.vec(x, -1)))
test2 <- lapply(test, function(x) cbind(x, shift.vec(x, -1)))
head(test2[[1]])
test <- geodata_per_day[1:3]
test2 <- lapply(test, function(x) cbind(x, shift.vec(x, -1)))
head(test2[[1]])
test <- geodata_per_day[1:3]
test2 <- lapply(test, function(x) cbind(x, shift.vec(x$time, -1)))
head(test2[[1]])
tail(test2[[1]])
test2 <- lapply(test, function(x) cbind(x, x$time.p1 <- shift.vec(x$time, -1)))
tail(test2[[1]])
test2 <- lapply(test, function(x) cbind(x, time.p1= shift.vec(x$time, -1)))
tail(test2[[1]])
str(geodata_per_day)
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, time.p1= shift.vec(x$time, -1)))
head(geodata_per_day[[1]])
str(geodata_per_day)
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, time.diff.to.prev = as.numeric(difftime(x$time.p1, x$time))))
head(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.m.per.sec = x$dist.to.prev / x$time.diff.to.prev))
head(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.km.per.h = x$speed.m.per.sec * 3.6))
head(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.km.per.h = ifelse(is.na(x$speed.km.per.h), 0, x$speed.km.per.h))
head(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.km.per.h = ifelse(is.na(x$speed.km.per.h), 0, x$speed.km.per.h)))
head(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) rm(x$speed.km.per.h))
geodata_per_day <- split(geodata, as.Date(geodata$time))
str(geodata_per_day)
# Shifting the time vector to include end time
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, time.p1= shift.vec(x$time, -1)))
head(geodata_per_day[[1]])
# Calculating time between two positions (in seconds)
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, time.diff.to.prev = as.numeric(difftime(x$time.p1, x$time))))
head(geodata_per_day[[1]])
# Calculating metres per seconds, kilometres per hour and two LOWESS smoothers to get rid of some noise.
geodata$speed.km.per.h <- geodata$speed.m.per.sec * 3.6
geodata$speed.km.per.h <- ifelse(is.na(geodata$speed.km.per.h), 0, geodata$speed.km.per.h)
geodata$lowess.speed <- lowess(geodata$speed.km.per.h, f = 0.2)$y
geodata$lowess.ele <- lowess(geodata$ele, f = 0.2)$y
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.m.per.sec = x$dist.to.prev / x$time.diff.to.prev))
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.km.per.h = x$speed.m.per.sec * 3.6))
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, ifelse(is.na(x$speed.km.per.h), 0, x$speed.km.per.h)))
head(geodata_per_day[[1]])
geodata_per_day <- split(geodata, as.Date(geodata$time))
str(geodata_per_day)
# Shifting the time vector to include end time
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, time.p1= shift.vec(x$time, -1)))
head(geodata_per_day[[1]])
# Calculating time between two positions (in seconds)
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, time.diff.to.prev = as.numeric(difftime(x$time.p1, x$time))))
head(geodata_per_day[[1]])
# Calculating metres per seconds, kilometres per hour and two LOWESS smoothers to get rid of some noise.
geodata$speed.km.per.h <- geodata$speed.m.per.sec * 3.6
geodata$speed.km.per.h <- ifelse(is.na(geodata$speed.km.per.h), 0, geodata$speed.km.per.h)
geodata$lowess.speed <- lowess(geodata$speed.km.per.h, f = 0.2)$y
geodata$lowess.ele <- lowess(geodata$ele, f = 0.2)$y
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.m.per.sec = x$dist.to.prev / x$time.diff.to.prev))
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, speed.km.per.h = x$speed.m.per.sec * 3.6))
head(geodata_per_day[[1]])
summary(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, lowess.speed = lowess(x$speed.km.per.h, f = 0.2)$y)
)
summary(geodata_per_day[[1]])
geodata_per_day <- lapply(geodata_per_day, function(x) cbind(x, lowess.ele = lowess(x$ele, f = 0.2)$y))
summary(geodata_per_day[[1]])
head(geodata_per_day[[1]])
geodata_per_day
geodata_per_day_combined <- unlist(geodata_per_day)
head(geodata_per_day_combined)
geodata_per_day_combined <- do.call("rbind", geodata_per_day)
head(geodata_per_day_combined)
nrow(geodata_per_day_combined)
tail(geodata_per_day_combined)
pirateplot(formula = speed.km.per.h ~ day,
point.o = .1,
data = geodata)
pirateplot(formula = speed.km.per.h ~ day,
point.o = .1,
data = geodata_per_day_combined)
geodata <- geodata_per_day_combined
plot(rev(geodata$lon), rev(geodata$lat), type = "l", col = "red", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
geodata_per_day <- split(geodata, as.Date(geodata$time))
str(geodata_per_day)
col=rainbow(15)
plot(rev(geodata$lon), rev(geodata$lat), type = "l", col = "white", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
for (i in 1:length(geodata_per_day)) {
data <- geodata_per_day[[i]]
lines(rev(data$lon), rev(data$lat), type = "l", col = col[i], lwd = 3)
}
plot(geodata$ele, type = "l", bty = "n", xaxt = "n", ylab = "Elevation", xlab = "", col = "grey40")
lines(geodata$lowess.ele, col = "red", lwd = 3)
legend(x="bottomright", legend = c("GPS elevation", "LOWESS elevation"),
col = c("grey40", "red"), lwd = c(1,3), bty = "n")
ggplot(data = geodata, aes(x = speed.km.per.h)) + geom_density()
plot(geodata$speed.km.per.h, type = "l", bty = "n", xaxt = "n", ylab = "Speed (km/h)", xlab = "",
col = "grey40")
lines(geodata$lowess.speed, col = "blue", lwd = 3)
legend(x="bottom", legend = c("GPS speed", "LOWESS speed"),
col = c("grey40", "blue"), lwd = c(1,3), bty = "n")
abline(h = mean(geodata$speed.km.per.h), lty = 2, col = "blue")
geodata_per_day_combined[is.max(geodata_per_day_combined$speed.km.per.h),]
geodata_per_day_combined[which.max(geodata_per_day_combined$speed.km.per.h),]
setwd("U:/Github_blog")
# All recent GPS tracks were downloaded from the device
myfiles <- list.files(path = "gpx", full.names = TRUE)
# Following https://www.r-bloggers.com/stay-on-track-plotting-gps-tracks-with-r/
library(XML)
library(OpenStreetMap)
library(lubridate)
for (i in 1:length(myfiles)){
# One of the files seems to be broken, but since the file is one with earlier data
# not from the trip, I will simply skip it
tryCatch({
rm(pfile)
print(i)
pfile <- htmlTreeParse(myfiles[i], useInternalNodes = T)
}, error=function(e){cat("ERROR\n")})
if (exists("pfile")){
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
if (i == 1){
geodata <- geodf
} else {
geodata <- rbind(geodata, geodf)
}
geodata_all <- geodata
# Transforming the time column
geodata_all$time <- strptime(geodata_all$time, format = "%Y-%m-%dT%H:%M:%SZ")
# ordering by date
library(plyr)
geodata_all <- arrange(geodata_all, time)
head(geodata_all)
tail(geodata_all)
summary(geodata_all)
geodata <- geodata_all[which(as.numeric(geodata_all$lon) < 0),]
# extracting day
geodata$day <- days(geodata$time)
head(geodata)
tail(geodata)
summary(geodata)
head(geodata_all)
geodata <- geodata_all[which(as.numeric(geodata_all$lon) < 0),]
geodata$day <- days(geodata_all$time)
head(geodata)
geodata$day <- days(geodata$time)
head(geodata)
?days
geodata$day <- days(as.Date(geodata$time))
head(geodata)
geodata$day <- format(as.Date(geodata$time,format="%Y-%m-%d"), "%d")
head(geodata)
tail(geodata)
summary(geodata)
geodata$day <- as.factor(format(as.Date(geodata$time,format="%Y-%m-%d"), "%d"))
head(geodata)
tail(geodata)
summary(geodata)
geodata[which(geodata$day == 22),]
geodata[which(geodata$day == 10),]
geodata_10 <- geodata[which(geodata$day == 10),]
head(geodata)
plot(as.Date(geodata_10$time),geodata_10$ele)
require(ggplot2)
theme_set(theme_bw()) # Change the theme to my preference
ggplot(aes(x = time, y = ele), data = geodata_10) + geom_point()
head(geodata_10)
head(geodata)
geodata$time[1]
geodata$time[1]+1
str(geodata)
geodata$time$hour[1]+1
geodata$time$hour[1]
test <- geodata[1,]
test
test$time$hour <- test$time$hour +1
test
test <- geodata[1,]
test$time$hour <- test$time$hour -7
test
head(geodata)
geodata$time$hour <- geodata$time$hour -7
head(geodata)
geodata_10 <- geodata[which(geodata$day == 10),]
ggplot(aes(x = time, y = ele), data = geodata_10) + geom_point()
geodata$time
head(geodata_all)
geodata <- geodata_all[which(as.numeric(geodata_all$lon) < 0),]
geodata$day <- as.factor(format(as.Date(geodata$time,format="%Y-%m-%d"), "%d"))
head(geodata)
test <- geodata[1,]
test
format(test$time, tz="America/Los_Angeles",usetz=TRUE)
format(test$time, tz="America/Chicago",usetz=TRUE)
test
format(test$time, tz="America/Chicago",usetz=TRUE)
format(test$time, tz="America/New_York",usetz=TRUE)
?timezone
attributes(test$time)$tzone <- "America/Los_Angeles"
test
attributes(test$time)$tzone <- "America/Los_Angeles"
test
attributes(test$time)$tzone
attributes(test$time)$tzone <- "America/Chicago"
attributes(test$time)$tzone
test
format(test$time, tz="America/Los_Angeles",usetz=TRUE)
test <- geodata[1,]
format(test$time, tz="America/Los_Angeles",usetz=TRUE)
test$time
Sys.time()
as.POSIXlt(Sys.time(), "GMT")
as.POSIXlt(Sys.time(), "CEST")
test$time
format(test$time, tz="EET",usetz=TRUE)
geodata <- geodata_all[which(as.numeric(geodata_all$lon) < 0),]
# extracting day
geodata$day <- as.factor(format(as.Date(geodata$time,format="%Y-%m-%d"), "%d"))
test <- geodata[1,]
test$time
format(test$time, tz="EET",usetz=TRUE)
format(test$time, tz="EET")
format(test$time, tz="GMT")
format(test$time, tz="EST")
library(lubridate)
with_tz(test$time, tz="America/New_York")
?olson_time_zones()
olson_time_zones(order_by = c("name", "longitude"))
?OlsonNames()
with_tz(test$time, tz="America/Chicago")
head(geodata)
geodata$time_CDT <- with_tz(geodata$time, tz="America/Chicago")
head(geodata)
geodata_10 <- geodata[which(geodata$day == 10),]
ggplot(aes(x = time, y = ele), data = geodata_10) + geom_point()
ggplot(aes(x = time_CDT, y = ele), data = geodata_10) + geom_point()
ggplot(aes(x = time_CDT, y = ele), data = geodata) + geom_point()
ggplot(aes(x = time_CDT, y = ele), data = geodata) + geom_point() + facet_grid(day ~ .)
ggplot(aes(x = time_CDT, y = ele), data = geodata) + geom_point() + facet_wrap( ~ day, ncol=3)
ggplot(aes(x = time_CDT, y = ele), data = geodata) + geom_point() + facet_wrap( ~ day, ncol=3, scales="free_y")
ggplot(aes(x = time_CDT, y = ele), data = geodata) + geom_point() + facet_wrap( ~ day, ncol=3, scales="free")
